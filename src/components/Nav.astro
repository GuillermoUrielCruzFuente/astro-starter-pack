---
export type Page = {
	name: string;
	path: string;
};

type Props = {
	title: string;
	pages: Page[];
};

const { title, pages } = Astro.props;
---

<script>
	const toggler = (initialState: boolean) => {
		let state = initialState;

		return () => {
			state = !state;
			return state;
		};
	};
	const menuToggler = toggler(false);

	const setScrollbarVisibility = (isVisible: boolean) => {
		const html = document.querySelector(".content") as HTMLDivElement;
		html.style.overflow = isVisible ? "auto" : "hidden";
	};

	const responsiveMenuButton = document.querySelector(".ham-menu");
	responsiveMenuButton?.addEventListener("click", (clickEvent) => {
		const button = clickEvent.currentTarget as HTMLButtonElement;
		const isMenuOpen = menuToggler();

		isMenuOpen
			? button.querySelector("svg")?.classList.add("active")
			: button.querySelector("svg")?.classList.remove("active");

		setScrollbarVisibility(!isMenuOpen);
	});
</script>

<header>
	<a
		class="title"
		href="/"
	>
		{title}
	</a>

	<button class="ham-menu">
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="24"
			height="24"
			viewBox="0 0 24 24"
			fill="none"
			stroke="currentColor"
			stroke-width="2"
			stroke-linecap="round"
			stroke-linejoin="round"
			class="lucide lucide-menu"
		>
			<line
				x1="4"
				x2="20"
				y1="12"
				y2="12"
			>
			</line>
			<line
				x1="4"
				x2="20"
				y1="6"
				y2="6"
			>
			</line>
			<line
				x1="4"
				x2="20"
				y1="18"
				y2="18"
			>
			</line>
		</svg>
	</button>

	<nav>
		<ul>
			{
				pages.map((page) => (
					<li>
						<a
							class="nav-link"
							href={page.path}
						>
							{page.name}
						</a>
					</li>
				))
			}
		</ul>
	</nav>
</header>

<style scoped lang="scss">
	header {
		box-sizing: border-box;
		width: 100%;
		height: var(--nav-height);
		position: sticky;
		top: 0;
		left: 0;
		z-index: 100;
		background-color: #000;
		box-shadow: 0 0 40px 5px #000;

		display: flex;
		flex-flow: row nowrap;
		align-items: center;
		justify-content: space-between;
		padding-inline: 2rem;
		padding-block: 1rem;
	}

	.title {
		font-weight: 900;
		color: #fff;
		text-decoration: none;
		font-size: 1.5rem;
	}

	.ham-menu {
		padding: 0;
		margin: 0;
		border: none;
		outline: none;
		height: 100%;
		aspect-ratio: 1;
		color: #aaa;
		background-color: transparent;
		cursor: pointer;
		display: none;

		svg {
			width: 100%;
			height: 100%;

			$svg-trans: 300ms;
			transition:
				color $svg-trans,
				transform $svg-trans;

			&:hover {
				color: #fff;
				transform: scale(1.05);
			}
		}

		.active {
			color: yellow !important;
		}
	}

	nav {
		height: 100%;
		display: flex;
		flex-flow: row nowrap;
		gap: 1rem;
		align-items: center;
		justify-content: center;

		ul {
			display: flex;
			flex-flow: row nowrap;
			list-style: none;
			margin: unset;
			padding: unset;
			gap: 0.75rem;
		}

		li {
			list-style: none;
		}

		.nav-link {
			font-size: 0.85rem;
			font-weight: 400;
			line-height: 1;
			text-decoration: none;

			$link-color: #fff;
			color: $link-color;
			border-bottom: 1px dashed $link-color;
			border-top: 1px dashed $link-color;

			$link-transition: 300ms;
			transition:
				color $link-transition,
				border $link-transition;

			&:hover {
				$hover-color: yellow;
				color: $hover-color;
				border-bottom: 1px dashed $hover-color;
				border-top: 1px dashed $hover-color;
			}
		}
	}

	@media (width <= 400px) {
		header {
			padding-inline: 1rem;
			padding-block: 0.5rem;
		}

		nav {
			display: none;
		}

		.ham-menu {
			display: block;
		}
	}
</style>
